numU = 5;               % number of U-shaped sheets
Nrows = 4;              % heater rows per U on each inside face
pack_length = 1;     % depth into page (m) - used for heat dissipation/generation
cell_diameter = 22e-3;

% U geometry (meters)
a = 78e-3/2;               % inner half-width of U opening (m)
wall_thk = 3e-3;       % wall thickness of U (m)
bottom_thk = 2e-3;     % bottom thickness of U (m)
wall_h = 120e-3;          % wall height (m)

% baseplate
base_thk = 4e-3;       % baseplate thickness (m)
margin = 1e-3;          % side margin around U array (m)

% spacing (center-to-center)
pitch = 2*(a + wall_thk) + 5e-3;  % adjust gap between Us here

% heater/contact geometry (thin strips on inner faces)
contact_thk = 3e-4;     % heater/contact layer thickness (m)
heater_height = cell_diameter; % fraction of row spacing used by heater rectangle height

% fin parameters 
Nfins      = 20;       % number of fins
fin_thk    = 2e-3;    % thickness [m]
fin_h      = 5e-3;   % height [m]

% heat input

n_cell_module = 18*5;
heat_cell = 2; % heat generated by cell


heatflux_cell = heat_cell * n_cell_module / Nrows / 2 / heater_height / pack_length; % half heatflux as assumed equal comming out either end
A = heater_height*pack_length*Nrows*2*numU;
Q = A*heatflux_cell;

htc = flatPlateAirHTC(15,pack_length);
% ------------------------------------- 

% compute U centers along x
x_centers = ((0:numU-1) - (numU-1)/2) * pitch;

% prepare gd (10xN rectangle columns), names cell
gd = zeros(10,0);
names = {};
idx = 0;

% build U pieces: left wall, right wall, bottom for each U
for ui = 1:numU
    xc = x_centers(ui);

    % left wall
    x1 = xc - a - wall_thk; x2 = xc - a;
    y1 = bottom_thk; y2 = wall_h;
    R = [3;4; x1; x2; x2; x1; y1; y1; y2; y2];
    gd(:,end+1) = R; idx = idx+1; 
    names{end+1} = sprintf('U%d_wall_left', ui);
    % right wall
    x1 = xc + a; x2 = xc + a + wall_thk;
    R = [3;4; x1; x2; x2; x1; y1; y1; y2; y2];
    gd(:,end+1) = R; idx = idx+1; 
    names{end+1} = sprintf('U%d_wall_right', ui);
    % bottom (bridge)
    x1 = xc - a - wall_thk; x2 = xc + a + wall_thk;
    y1 = 0; y2 = bottom_thk;
    R = [3;4; x1; x2; x2; x1; y1; y1; y2; y2];
    gd(:,end+1) = R; idx = idx+1; 
    names{end+1} = sprintf('U%d_base', ui);
end

% baseplate rectangle (continuous below U)
xmin = min(x_centers) - (a + wall_thk) - margin;
xmax = max(x_centers) + (a + wall_thk) + margin;
R = [3;4; xmin; xmax; xmax; xmin; -base_thk; -base_thk; 0; 0];
gd(:,end+1) = R; idx = idx+1; 
names{end+1} = 'baseplate';
% add heater/contact strips (left and right inner faces, Nrows each)
for ui = 1:numU
    xc = x_centers(ui);
    % row vertical centers (avoid endpoints)
    yc_centers = (1:Nrows) .* (wall_h/(Nrows+1));
    row_h = heater_height;

    for r = 1:Nrows
        yc = yc_centers(r);
        y1 = yc - row_h/2; y2 = yc + row_h/2;

        % left inner face heater (attached INSIDE the U)
        x1 = xc - a; x2 = xc - a + contact_thk;  % thin strip just inside face
        R = [3;4; x1; x2; x2; x1; y1; y1; y2; y2];
        gd(:,end+1) = R; idx = idx+1; 
        names{end+1} = sprintf('U%d_R%d_thermal_left', ui,r);
        % right inner face heater
        x1 = xc + a - contact_thk; x2 = xc + a;
        R = [3;4; x1; x2; x2; x1; y1; y1; y2; y2];
        gd(:,end+1) = R; idx = idx+1;
        names{end+1} = sprintf('U%d_R%d_thermal_right', ui,r);
    end
end

% base plate fins
if Nfins > 0
    fin_spacing = (xmax - xmin - Nfins * fin_thk) / (Nfins + 1);  % gap between fins
    
    for fi = 1:Nfins
        % X coordinates for this fin
        x1 = xmin + fi * fin_spacing + (fi-1) * fin_thk;
        x2 = x1 + fin_thk;
        % Y coordinates (below the baseplate)
        y1 = -base_thk - fin_h;
        y2 = -base_thk;
    
        % Rectangle column for this fin
        R = [3; 4; x1; x2; x2; x1; y1; y1; y2; y2];
        gd(:, end+1) = R;
        idx = idx + 1;
        names{end+1} = sprintf('fin_%d', fi);
    end
end
% build decsg name arrays & set formula
ns = char(names)';           % rows -> names, transpose to match decsg expectation
sf = names{1};
for k = 2:numel(names)
    sf = [sf '+' names{k}];
end

%%%%% convert to geometry and import to finite element model
model = createpde('thermal','steadystate');
[dl,bt] = decsg(gd,sf,ns);
geometryFromEdges(model,dl);

figure('units','normalized','position',[0.15 0.15 0.6 0.6]);
pdegplot(model,'FaceLabels','on','EdgeLabels','on');
axis equal
title('Geometry');


%%%%% material properties
condutivity_aluminium = 237;
density_aluminium = 2700;
specific_heat_alumiunium = 900;

condutivity_TIM = 10;
density_TIM = 500;
specific_heat_IIM = 100;

%find faces
al_faces = find(~contains(names,'thermal'));
ct_faces = find(contains(names,'thermal'));

%apply materials
thermalProperties(model, 'Face', al_faces, ...
    'ThermalConductivity', condutivity_aluminium, ...
    'MassDensity', density_aluminium, ...
    'SpecificHeat', specific_heat_alumiunium);

thermalProperties(model, 'Face', ct_faces, ...
    'ThermalConductivity', condutivity_TIM, ...
    'MassDensity', density_TIM, ...
    'SpecificHeat', specific_heat_IIM);

%%%%% APPPLY BOUNDARY CONDITIONS
cooledEdgesCoords = []; % 2 x N array

if Nfins>0
    % Get all X edges along bottom of baseplate (between xmin and xmax)
    % Start at xmin, then step through fins and gaps
    x_start = xmin;
    y_bottombase = -base_thk;  % y coordinate for bottom of baseplate
    y_midfin = -base_thk - fin_h/2;
    y_endfin = -base_thk - fin_h;
    for fi = 1:Nfins+1
        if fi <= Nfins
            % Current gap ends at start of a fin
            x_end = xmin + fi * fin_spacing + (fi-1) * fin_thk;
        else
            % After last fin
            x_end = xmax;
        end
        
        % Midpoint of this gap segment
        xm = (x_start + x_end) / 2;
        cooledEdgesCoords(end+1,:) = [xm; y_bottombase];
   
        % Advance x_start to end of fin if not last gap
        if fi <= Nfins
            % Midpoint of fin to bottom edge
            x_start_fin = xmin + fi * fin_spacing + (fi-1) * fin_thk;
            x_end_fin = xmin + fi * fin_spacing + fi * fin_thk;
            xm = (x_end_fin + x_start_fin) / 2;
            cooledEdgesCoords(end+1,:) = [xm; y_endfin];
             % left and right edge of fin
            x_start_fin = xmin + fi * fin_spacing + (fi-1) * fin_thk;
            cooledEdgesCoords(end+1,:) = [x_start_fin; y_midfin];
            cooledEdgesCoords(end+1,:) = [x_start_fin + fin_thk; y_midfin];
            x_start = x_end + fin_thk; % skip over fin thickness
        end
    end
else
    cooledEdgesCoords = [(xmin + xmax)/2, -base_thk];
end
freeEdges = nearestEdge(model.Geometry,cooledEdgesCoords);
% Convection on underside
thermalBC(model,'edge',freeEdges,...
          'ConvectionCoefficient',htc,...
          'AmbientTemperature',25);

%%%%%% get indexes of heated faces
heatedMidpoints = []; 

for ui = 1:numU
    xc = x_centers(ui);
    yc_centers = (1:Nrows) .* (wall_h/(Nrows+1));
    row_h = heater_height;

    for r = 1:Nrows
        yc = yc_centers(r);
        y1 = yc - row_h/2; 
        y2 = yc + row_h/2;

        % left inner face heater
        x_l = xc - a + contact_thk;
        heatedMidpoints(end+1,:) = [x_l, (y1+y2)/2];

        % right inner face heater
        x_r = xc + a - contact_thk; 
        heatedMidpoints(end+1,:) = [x_r, (y1+y2)/2];
    end
end
heaterEdges = nearestEdge(model.Geometry,heatedMidpoints);

% appply heatflux on edges
thermalBC(model, 'edge', heaterEdges, 'HeatFlux', heatflux_cell);

%%%% Solve and plots
generateMesh(model,"Hmax",0.5e-3)
result = solve(model);

figure
pdeplot(model,'XYData',result.Temperature,'ColorMap','jet');
xlabel("dimensions (m)")
% axis equal 
c = colorbar;
c.Label.String = 'Temperature (Â°C)';
